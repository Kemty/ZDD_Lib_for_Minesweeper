"""
    実験2: 性能テスト

    概要:

        ランダムに生成したマインスイーパーを解かせ, 勝率と解答速度を計測する.
    
    計測方法:

        ・盤面のサイズ: 20×20, 40×40, 60×60, 80×80
        ・爆弾総数: 10%, 20%
        ・初手はランダムで開き, そのマスがヒント数字0になるように盤面を生成

        それぞれ50回テストし

        ・勝数
        ・勝利したゲームのみでの時間 最小, 中央値, 最大
        ・全ゲームでの時間 最小, 中央値, 最大

        を計測する. ただし, 
        
        ・時間上限: 200sec
        
        であり, これを超えた場合はテストを中断し, ∞ sec として集計する. (コード内では配列の型の都合上200.0secとしている)

    備考: 

        比較対象とするソルバーを用意できていないため, ソルバーとしての優劣を客観的に判断することはできない.
        ただし,
        ・安全であると確定するマスが存在する場合, 必ず開く.
        ・存在しない場合は, 危険度を正確に計算し最も安全なマスを開く
        という特性上, 勝率については十分に高いと考えられる.
"""

from minesweeper import Minesweeper
from minesweeperSolver_with_deleting import MinesweeperSolver_with_deleting, MinesweeperResult
import numpy as np
import gc

if __name__ == "__main__":
    with open("ZDD_lib\\output\\experiment2_dataset.txt", 'r') as dataset:
        for N in [20, 40, 60, 80]:
            for R in [1, 2]:
                B = N * N * R // 10
                print(f"{N}×{N}, B={B}")
                win_times = []
                all_times = []
                for k in range(1, 51):

                    # 盤面の読み込み
                    board = [[False]*N for _ in range(N)]
                    dataset.readline()
                    for i in range(N):
                        row = dataset.readline()
                        for j in range(N):
                            if row[j] == '#':
                                board[i][j] = True
                            elif row[j] == 's':
                                si, sj = i, j
                    minesweeper = Minesweeper(N, N, B, False)
                    minesweeper.set_target_board(board=board)
                    minesweeper.open(si, sj)

                    gc.collect()
                    solver = MinesweeperSolver_with_deleting(minesweeper)
                    result = solver.solve_auto_with_timelimit(time_limit=200)
                    is_win, play_time = result.is_win, result.play_time

                    all_times.append(play_time)
                    if is_win:
                        win_times.append(play_time)
                    print(k, end=' ', flush=True)
                print()
                
                win_cnt = len(win_times)
                print(win_cnt)
                if win_cnt >= 1:
                    win_times = np.array(win_times, dtype=float)
                    print(np.min(win_times), np.median(win_times), np.max(win_times))
                else:
                    print("-")
                all_times = np.array(all_times, dtype=float)
                print(np.min(all_times), np.median(all_times), np.max(all_times))

"""
実験結果:

20×20, B=40
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 
47
0.012069699936546385 0.01626380009111017 0.04209380003158003
0.012069699936546385 0.01638970000203699 0.04209380003158003
20×20, B=80
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 
36
0.02063249994534999 0.03798444999847561 0.12808819999918342
0.002078799996525049 0.03528314997674897 0.12808819999918342
40×40, B=160
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 
47
0.06401019997429103 0.07601939991582185 0.10979989997576922
0.06401019997429103 0.07621525001013651 0.10979989997576922
40×40, B=320
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 
17
0.1389303000178188 0.2458232999779284 0.7067950000055134
0.0037978000473231077 0.24322790000587702 1.1213047999190167
60×60, B=360
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 
49
0.15640279999934137 0.19149749993812293 0.2902937999460846
0.15640279999934137 0.19113554997602478 0.2902937999460846
60×60, B=720
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 
13
0.8576289000920951 1.3961793000344187 17.471398000023328
0.005499200080521405 1.3999570499872789 23.50468579994049
80×80, B=640
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 
46
0.350668300059624 0.4243949000374414 0.7566618000855669
0.350668300059624 0.4243949000374414 0.7566618000855669
80×80, B=1280
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 
8
3.356514099985361 7.946815399976913 38.1114699000027
0.0055102999322116375 5.275077200029045 74.30322450003587
"""